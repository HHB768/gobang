#ifndef __XQ4_GB_PRINTER_HPP__
#define __XQ4_GB_PRINTER_HPP__

#include <vector>
#include <iostream>

namespace mfwu {

const std::vector<std::vector<bool>> 
matrix_X = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
            {0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0},
            {0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0},
            {0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0},
            {0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0},
            {0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0},
            {0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0},
            {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0},
            {0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
            {0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
            {0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

const std::vector<std::vector<bool>> 
matrix_Q = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
            {0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0},
            {0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0},
            {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0},
            {0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
            {0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
            {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
            {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
            {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
            {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
            {0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0},
            {0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0},
            {0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0},
            {0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0},
            {0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0},
            {0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,1,1,1,1,0},
            {0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

const std::vector<std::vector<bool>> 
matrix_4 = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0},
            {0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
            {0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0},
            {0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

const std::vector<std::vector<bool>> 
matrix__ = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0},
            {0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
            {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

const std::vector<std::vector<bool>> 
matrix_G = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0},
            {0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0},
            {0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0},
            {0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0},
            {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0},
            {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0},
            {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
            {0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
            {0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0},
            {0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0},
            {0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0},
            {0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

const std::vector<std::vector<bool>> 
matrix_B = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
            {0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0},
            {0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0},
            {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
            {0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0},
            {0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0},
            {0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0},
            {0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
            {0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0},
            {0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0},
            {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0},
            {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
            {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0},
            {0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0},
            {0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0},
            {0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

class printer {
public:
    using M_type = std::vector<std::vector<bool>>;
    
    template <typename... Args>
    static M_type concat(const M_type& m1, const M_type& m2,
                         const Args&... args) {
        return concat(concat(m1, m2), std::forward<Args>(args...));
    }
    static M_type concat(const M_type& m1, const M_type& m2) {
        return concat(_copy(m1), m2);
    }
    static M_type concat(M_type&& m1, const M_type& m2) {
        assert(m1.size() == m2.size());
        for (int i = 0; i < m1.size(); i++) {
            m1[i].insert(m1.end(), m2.begin(), m2.end());
        }
        return m1;
    }  // CHECK: is it works?

private:
    static M_type _copy(const M_type& m1) {
        return M_type(m1);
    }
}



}  // endof namespace mfwu

#endif  // __XQ4_GB_PRINTER_HPP__


